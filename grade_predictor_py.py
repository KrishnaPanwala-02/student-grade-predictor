# -*- coding: utf-8 -*-
"""grade_predictor.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1j4WIpS-hUAQH5KSVHT2HXKKpbBoSAZVF
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import StandardScaler
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import OneHotEncoder
import joblib

# Load dataset
df = pd.read_csv('student-mat.csv', sep=';')

# Target variable
target = 'G3'

# Features (numeric + categorical)
numeric_features = ['age', 'absences', 'G1', 'G2', 'studytime', 'failures']
categorical_features = ['school', 'sex', 'address', 'famsize', 'Pstatus', 'schoolsup', 'famsup',
                        'paid', 'activities', 'internet', 'romantic', 'Mjob', 'Fjob', 'reason', 'guardian']

# Preprocessing for numeric and categorical data
numeric_transformer = Pipeline(steps=[
    ('imputer', SimpleImputer(strategy='median')),
    ('scaler', StandardScaler())
])

categorical_transformer = Pipeline(steps=[
    ('imputer', SimpleImputer(strategy='most_frequent')),
    ('onehot', OneHotEncoder(handle_unknown='ignore'))
])

# Combine preprocessing
preprocessor = ColumnTransformer(
    transformers=[
        ('num', numeric_transformer, numeric_features),
        ('cat', categorical_transformer, categorical_features)
    ])

# Define the pipeline
model_pipeline = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('regressor', LinearRegression())
])

# Features and target
X = df[numeric_features + categorical_features]
y = df[target]

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train model
model_pipeline.fit(X_train, y_train)

# Predict
y_pred = model_pipeline.predict(X_test)

# Evaluate
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse:.2f}")
print(f"R² Score: {r2:.4f}")

# Cross-validation
scores = cross_val_score(model_pipeline, X, y, cv=5, scoring='r2')
print(f"Cross-Validated R²: {scores.mean():.4f} ± {scores.std():.4f}")

# Save model
joblib.dump(model_pipeline, 'grade_predictor_model.pkl')
print("Model saved as 'grade_predictor_model.pkl'")

